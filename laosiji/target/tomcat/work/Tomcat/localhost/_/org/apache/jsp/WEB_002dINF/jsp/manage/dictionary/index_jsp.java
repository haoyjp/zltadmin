/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2016-10-18 09:06:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.manage.dictionary;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.util.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/jsp/manage/dictionary/../../common/base.jsp", Long.valueOf(1476780415150L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String path = request.getContextPath();
	String basePath = request.getScheme() + "://"
			+ request.getServerName() + ":" + request.getServerPort()
			+ path + "/";

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<base href=\"");
      out.print(basePath);
      out.write("\">\r\n");
      out.write("\t\t<title>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</title>\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"expires\" content=\"0\">\r\n");
      out.write("\t<meta charset=\"utf-8\" />\r\n");
      out.write("\t<meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\r\n");
      out.write("\t<meta http-equiv=\"description\" content=\"This is my page\">\r\n");
      out.write("\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,Chrome=1\" />\r\n");
      out.write("\t<!-- IE9 -->\r\n");
      out.write("    <script src=\"http://apps.bdimg.com/libs/respond.js/1.4.2/respond.min.js\"></script>\r\n");
      out.write("    <script src=\"http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js\"></script>\r\n");
      out.write("\t<!-- jquery 1.7.2 -->\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/jquery/jquery-1.9.1.js\"></script>\r\n");
      out.write("\t<!-- bootstarp 3.3.5 -->\r\n");
      out.write("\t<link href=\"static/bootstarp/dist/css/bootstrap.css\"rel=\"stylesheet\">\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/bootstarp/dist/js/bootstrap.js\"></script>\r\n");
      out.write("\t<!-- bootstarp-table -->\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/bootstarptable/dist/bootstrap-table.js\"></script>\r\n");
      out.write("\t<link href=\"static/bootstarptable/dist/bootstrap-table.css\"rel=\"stylesheet\">\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/bootstarptable/dist/locale/bootstrap-table-zh-CN.js\"></script>\r\n");
      out.write("\t<!-- 模态框dialog -->\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/bootstarptable/js/modal.js\"></script>\r\n");
      out.write("\t<!-- layer弹出框 -->\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/layer-v2.4/layer/layer.js\"></script>\r\n");
      out.write("\t<!-- common.js -->\r\n");
      out.write("\t<script type=\"text/javascript\"src=\"static/ljy/common.js\"></script>\r\n");
      out.write("\t<!-- zTree相关 -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"static/zTree/css/zTreeStyle/metro.css\" type=\"text/css\">\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"static/zTree/js/jquery.ztree.all-3.5.min.js\"></script>\r\n");
      out.write("\t<!-- 图标库 -->\r\n");
      out.write("\t<link href=\"static/index/css/font-awesome.min.css?v=4.4.0\" rel=\"stylesheet\">\r\n");
      out.write("\t<!-- layui -->\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"static/layui/css/layui.css\" type=\"text/css\">");
      out.write("\r\n");
      out.write("\t</head>\r\n");
      out.write("\r\n");
      out.write("\t<body style=\"margin:0px; height:82%;\">\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "add.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t<!-- 编辑 模态框（Modal） -->\r\n");
      out.write("\t\t<div class=\"modal fade\" id=\"myModalEdit\" tabindex=\"-1\" role=\"dialog\" \r\n");
      out.write("\t\t   aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("\t\t   <div class=\"modal-dialog\">\r\n");
      out.write("\t\t      <div class=\"modal-content\">\r\n");
      out.write("\t\t         <div class=\"modal-header\">\r\n");
      out.write("\t\t            <button type=\"button\" class=\"close\" \r\n");
      out.write("\t\t               data-dismiss=\"modal\" aria-hidden=\"true\">\r\n");
      out.write("\t\t                  &times;\r\n");
      out.write("\t\t            </button>\r\n");
      out.write("\t\t            <h4 class=\"modal-title\" id=\"myModalLabel\">\r\n");
      out.write("\t\t               \t编辑\r\n");
      out.write("\t\t            </h4>\r\n");
      out.write("\t\t         </div>\r\n");
      out.write("\t\t         <div class=\"modal-body\">\r\n");
      out.write("\t\t         \t<form class=\"form-horizontal\" role=\"form\"> \r\n");
      out.write("\t\t         \t\t<div class=\"form-group\" style=\"display: none\">\r\n");
      out.write("\t\t\t\t\t        <label class=\"col-sm-2 control-label\">id</label>\r\n");
      out.write("\t\t\t\t\t        <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t\t\t            <input type=\"text\" method=\"edit\" class=\"form-control\" name=\"id\" id=\"id\" >\r\n");
      out.write("\t\t\t\t\t        </div>\r\n");
      out.write("\t\t\t\t\t    </div>\r\n");
      out.write("\t\t\t\t\t    <div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t        <label class=\"col-sm-2 control-label\">数据名称</label>\r\n");
      out.write("\t\t\t\t\t        <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t\t\t            <input type=\"text\" method=\"edit\" class=\"form-control\" name=\"name\" id=\"name\" >\r\n");
      out.write("\t\t\t\t\t        </div>\r\n");
      out.write("\t\t\t\t\t    </div>\r\n");
      out.write("\t\t\t\t\t    <div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t        <label class=\"col-sm-2 control-label\">标识</label>\r\n");
      out.write("\t\t\t\t\t        <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t\t\t            <input type=\"text\" method=\"edit\" class=\"form-control\" name=\"code\" id=\"code\">\r\n");
      out.write("\t\t\t\t\t        </div>\r\n");
      out.write("\t\t\t\t\t    </div>\r\n");
      out.write("\t\t\t\t\t    <div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t        <label class=\"col-sm-2 control-label\">排序</label>\r\n");
      out.write("\t\t\t\t\t        <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t\t\t            <input type=\"text\" method=\"edit\" class=\"form-control\" name=\"sort\" id=\"sort\">\r\n");
      out.write("\t\t\t\t\t        </div>\r\n");
      out.write("\t\t\t\t\t    </div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t         </div>\r\n");
      out.write("\t\t         <div class=\"modal-footer\">\r\n");
      out.write("\t\t            <button type=\"button\" class=\"btn btn-default\" \r\n");
      out.write("\t\t               data-dismiss=\"modal\">关闭\r\n");
      out.write("\t\t            </button>\r\n");
      out.write("\t\t            <button type=\"button\" id=\"buttonEdit\" class=\"btn btn-primary\" onclick=\"edit('");
      out.print(basePath);
      out.write("Manage/Dictionary/edit.do?date='+new Date())\">\r\n");
      out.write("\t\t               \t确认\r\n");
      out.write("\t\t            </button>\r\n");
      out.write("\t\t         </div>\r\n");
      out.write("\t\t      </div><!-- /.modal-content -->\r\n");
      out.write("\t\t\t</div><!-- /.modal -->\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- ztree start -->\r\n");
      out.write("\t\t<div class=\"panel-body\" style=\"padding-bottom: 0px;width:20%;heigth:100%;float:left\">\r\n");
      out.write("\t\t\t<div class=\"panel panel-default\" style=\"heigth:100%;\" >\r\n");
      out.write("\t\t\t\t<div class=\"panel-heading\"> \r\n");
      out.write("\t\t\t\t\t数据字典分类 \r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"panel-body\" style=\"heigth:100%;\">\r\n");
      out.write("\t\t\t\t\t<ul id=\"tree\" class=\"ztree\" style=\"width:700px;heigth:100%;\"></ul>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- ztree end -->\r\n");
      out.write("\t\t<!-- table start -->\r\n");
      out.write("\t\t<div class=\"panel-body\" style=\"padding-bottom: 0px;width:80%;float:right\">\r\n");
      out.write("\t\t\t<div id=\"toolbar\" class=\"btn-group\" style=\"width:35%;float:left\">\r\n");
      out.write("\t\t\t\t<button id=\"btn_add\" type=\"button\" class=\"btn btn-default\" onclick=\"showAddModelTree()\">\r\n");
      out.write("\t\t\t\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span>新增\r\n");
      out.write("\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t<button id=\"btn_edit\" type=\"button\" class=\"btn btn-default\" onclick=\"showEditModel()\">\r\n");
      out.write("\t\t\t\t\t<span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span>修改\r\n");
      out.write("\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t<button id=\"btn_delete\" type=\"button\" class=\"btn btn-default\" onclick=\"del('");
      out.print(basePath);
      out.write("Manage/Dictionary/delete.do?date='+new Date())\">\r\n");
      out.write("\t\t\t\t\t<span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>删除\r\n");
      out.write("\t\t\t\t</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<table id=\"table\"></table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- table end -->\r\n");
      out.write("\t</body>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\tvar zTree;\r\n");
      out.write("\t//鼠标移动上去\r\n");
      out.write("    function addHoverDom(treeId, treeNode) {\r\n");
      out.write("\t    \tvar sObj = $(\"#\" + treeNode.tId + \"_span\");\r\n");
      out.write("\t    \tif($(\"#addBtn_\" + treeNode.tId).length > 0 ){\r\n");
      out.write("\t    \t\treturn;\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t        if(treeNode.pId==\"\"){\r\n");
      out.write("\t        \tvar addStr = \"<span class='button add' id='addBtn_\" + treeNode.tId + \"'></span>\";\r\n");
      out.write("\t        }\r\n");
      out.write("\t        sObj.after(addStr);\r\n");
      out.write("\t        var btn = $(\"#addBtn_\"+treeNode.tId);\r\n");
      out.write("\t        if (btn) btn.bind(\"click\", function(){\t\r\n");
      out.write("\t        \t//将新节点添加到数据库中  \r\n");
      out.write("\t            var name='NewNode';  \r\n");
      out.write("\t            $.post('");
      out.print(basePath);
      out.write("Manage/ZtreeNode/add.do?pid='+treeNode.id+'&name='+name+'&type=1',function (data) {  \r\n");
      out.write("\t                var newID = data; //获取新添加的节点Id  \r\n");
      out.write("\t                var zTree = $.fn.zTree.getZTreeObj(\"tree\");\r\n");
      out.write("\t                zTree.addNodes(treeNode, {id:newID, pId:treeNode.id, name:name}); //页面上添加节点  \r\n");
      out.write("\t                var node = zTree.getNodeByParam(\"id\", newID, null); //根据新的id找到新添加的节点  \r\n");
      out.write("\t                zTree.selectNode(node); //让新添加的节点处于选中状态  \r\n");
      out.write("\t            });  \r\n");
      out.write("\t            return false;\r\n");
      out.write("\t        });\r\n");
      out.write("    };\r\n");
      out.write("    function removeHoverDom(treeId, treeNode) {\r\n");
      out.write("\t    if(treeNode.pId==\"\"){\r\n");
      out.write("\t    \t$(\"#addBtn_\"+treeNode.tId).unbind().remove();\t\r\n");
      out.write("\t    }\r\n");
      out.write("        $(\"#removeBtn_\"+treeNode.tId).unbind().remove();\r\n");
      out.write("        $(\"#editBtn_\"+treeNode.tId).unbind().remove();\r\n");
      out.write("    };\r\n");
      out.write("    function onRename(e, treeId, treeNode, isCancel) {  \r\n");
      out.write("        //需要对名字做判定的，可以来这里写~~  \r\n");
      out.write("        $.post('");
      out.print(basePath);
      out.write("Manage/ZtreeNode/edit.do?id='+treeNode.id+'&name='+treeNode.name);  \r\n");
      out.write("    }\r\n");
      out.write("    function onRemove(e, treeId, treeNode) {  \r\n");
      out.write("        $.post('");
      out.print(basePath);
      out.write("Manage/ZtreeNode/delete.do?id='+treeNode.id,function (result) {  \r\n");
      out.write("\t\t   var t = eval('('+result+')');\r\n");
      out.write("\t\t   if(t.status == '99'){\r\n");
      out.write("\t\t      layerBlackTwoSeconedNoReload('刪除成功');\r\n");
      out.write("\t\t   }else{\r\n");
      out.write("\t\t      layerBlackTwoSeconedNoReload(t.msg);\r\n");
      out.write("\t\t   } \r\n");
      out.write("\t\t}); \r\n");
      out.write("    }    \r\n");
      out.write("    function beforeRename(treeId, treeNode, newName, isCancel) {  \r\n");
      out.write("        if (newName.length == 0) {  \r\n");
      out.write("            alert(\"节点名称不能为空.\");  \r\n");
      out.write("            return false;  \r\n");
      out.write("        }  \r\n");
      out.write("        return true;  \r\n");
      out.write("    } \r\n");
      out.write("    function zTreeOnClick(event, treeId, treeNode) {\r\n");
      out.write("    \trefreshTable();\r\n");
      out.write("\t};\r\n");
      out.write("    var setting = {\r\n");
      out.write("        check: {\r\n");
      out.write("            enable: false//设置 zTree 的节点上是否显示 checkbox / radio 默认值: false\r\n");
      out.write("        },\r\n");
      out.write("        view: {\r\n");
      out.write("            addHoverDom: addHoverDom,\r\n");
      out.write("            removeHoverDom: removeHoverDom,\r\n");
      out.write("            beforeRename:beforeRename,\r\n");
      out.write("            dblClickExpand: false,\r\n");
      out.write("            showLine: true,\r\n");
      out.write("            selectedMulti: false\r\n");
      out.write("        },\r\n");
      out.write("        edit: {  \r\n");
      out.write("\t        enable: true, //单独设置为true时，可加载修改、删除图标  \r\n");
      out.write("\t        editNameSelectAll: true,  \r\n");
      out.write("\t        showRemoveBtn: true,  \r\n");
      out.write("\t        showRenameBtn: true  \r\n");
      out.write("    \t},  \r\n");
      out.write("        data: {\r\n");
      out.write("            simpleData: {\r\n");
      out.write("                enable:true,\r\n");
      out.write("                idKey: \"id\",\r\n");
      out.write("                pIdKey: \"pId\",\r\n");
      out.write("                rootPId: \"\"\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        callback: {\r\n");
      out.write("        \tonClick: zTreeOnClick, //单击事件  \r\n");
      out.write("       \t \tonRemove: onRemove, //移除事件  \r\n");
      out.write("            onRename: onRename //修改事件 \r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("\tvar zNodes;\r\n");
      out.write("\tfunction initTreeNode(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl:'");
      out.print(basePath);
      out.write("Manage/ZtreeNode/list.do?type=1',\r\n");
      out.write("\t\t\ttype:'GET',\r\n");
      out.write("\t\t\tasync:false,\r\n");
      out.write("\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\tzNodes = eval('('+result+')');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t var t = $(\"#tree\");\r\n");
      out.write("\t     t = $.fn.zTree.init(t, setting, zNodes);\r\n");
      out.write("\t}\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\tinitTreeNode();\r\n");
      out.write("\t\tinitTable();\r\n");
      out.write("\t});\r\n");
      out.write("\t//初始化表格\r\n");
      out.write("\tfunction initTable() {\r\n");
      out.write("        //先销毁表格  \r\n");
      out.write("        $('#cusTable').bootstrapTable('destroy');\r\n");
      out.write("        //初始化表格,动态从服务器加载数据  \r\n");
      out.write("        $(\"#table\").bootstrapTable({  \r\n");
      out.write("            method: \"get\",  //使用get请求到服务器获取数据  \r\n");
      out.write("            url: \"");
      out.print(basePath);
      out.write("Manage/Dictionary/list.do?date=\" + new Date(), //获取数据的Servlet地址  \r\n");
      out.write("            striped: true,  //表格显示条纹  \r\n");
      out.write("            pagination: true, //启动分页  \r\n");
      out.write("            toolbar:'toolbar',\r\n");
      out.write("            cache : false, //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）\r\n");
      out.write("             pageSize: 20,  //每页显示的记录数  \r\n");
      out.write("            pageNumber:1, //当前第几页  \r\n");
      out.write("            pageList : [ 20, 50, 100], //可供选择的每页的行数（*）  \r\n");
      out.write("            search: false,  //是否启用查询  \r\n");
      out.write("            showColumns: false,  //显示下拉框勾选要显示的列  \r\n");
      out.write("            showRefresh: true,  //显示刷新按钮  \r\n");
      out.write("            lickToSelect : true, //是否启用点击选中行\r\n");
      out.write("            sidePagination: \"server\", //表示服务端请求  \r\n");
      out.write("            showToggle : true, //是否显示详细视图和列表视图的切换按钮\r\n");
      out.write("\t\t\tcardView : false, //是否显示详细视图\r\n");
      out.write("\t\t\tdetailView : false, //是否显示父子表\r\n");
      out.write("            //设置为undefined可以获取pageNumber，pageSize，searchText，sortName，sortOrder  \r\n");
      out.write("            //设置为limit可以获取limit, offset, search, sort, order  \r\n");
      out.write("            queryParamsType : \"undefined\",   \r\n");
      out.write("            queryParams: function queryParams(params) {\r\n");
      out.write("            \tvar nodeId;\r\n");
      out.write("            \tif(typeof($.fn.zTree.getZTreeObj(\"tree\").getSelectedNodes()[0]) == \"undefined\"){\r\n");
      out.write("            \t\tnodeId = null;\r\n");
      out.write("            \t}else{\r\n");
      out.write("            \t\tnodeId = $.fn.zTree.getZTreeObj(\"tree\").getSelectedNodes()[0].id\r\n");
      out.write("            \t}\r\n");
      out.write("              //设置查询参数  \r\n");
      out.write("              var param = {    \r\n");
      out.write("                  pageNumber: params.pageNumber,    \r\n");
      out.write("                  pageSize: params.pageSize,  \r\n");
      out.write("                  //queryString : $(\"#txt_search_dictionary_name\").val(),\r\n");
      out.write("                  treeNodeId : nodeId\r\n");
      out.write("              };    \r\n");
      out.write("              return param;                   \r\n");
      out.write("            },\r\n");
      out.write("            columns : [ {\r\n");
      out.write("\t\t\t\t\tcheckbox : true\r\n");
      out.write("\t\t\t\t\t// radio: true  单选\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\tfield : 'name',\r\n");
      out.write("\t\t\t\t\ttitle : '数据名称',\r\n");
      out.write("\t\t\t\t\talign: 'left',\r\n");
      out.write("                    valign: 'top'\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\tfield : 'code',\r\n");
      out.write("\t\t\t\t\ttitle : '标识符',\r\n");
      out.write("\t\t\t\t\talign: 'left',\r\n");
      out.write("                    valign: 'top'\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\tfield : 'sort',\r\n");
      out.write("\t\t\t\t\ttitle : '排序',\r\n");
      out.write("\t\t\t\t\talign: 'left',\r\n");
      out.write("                    valign: 'top'\r\n");
      out.write("\t\t\t\t} ],  \r\n");
      out.write("            onLoadSuccess: function(){  //加载成功时执行  \r\n");
      out.write("            \t//alert(\"加载成功\");\r\n");
      out.write("            },  \r\n");
      out.write("            onLoadError: function(){  //加载失败时执行  \r\n");
      out.write("              layer.msg(\"加载数据失败\", {time : 1500, icon : 2}); \r\n");
      out.write("            }  \r\n");
      out.write("          });  \r\n");
      out.write("      }\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
